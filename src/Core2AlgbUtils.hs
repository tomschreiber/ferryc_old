-----------------------------------------------------------------------------------------
{-| Module      : Core2AlgbUtils
    Copyright   : 
    License     : All Rights Reserved

    Maintainer  : 
    Stability   : 
    Portability : 
-}
-----------------------------------------------------------------------------------------

module Core2AlgbUtils(  

-- =============================================================================
-- exports
-- =============================================================================
    cid,cid2,  ord,
    
    fuse1,
    
    incr1, incr2, incr3, decr1, decr2, decr3, 
    
    asProjList1, asProjList2, asProjList3,
    
    asSortList1

) where


-- =============================================================================
-- imports
-- =============================================================================

import LangAlgb(AttrName, SortDirection (..), AType (..))
import Utils.Int(stringToInt)


import Data.List((\\))






fuse1 :: [(AttrName)] -> [(AttrName)] -> [(AttrName)]


fuse1 [] [] = []  
fuse1 m [] = m  
fuse1 [] m = m

fuse1 m1 m2 =
        if(m1 == m2)
            then
                m1
            else
                error("fuse1")
                  




-- =============================================================================
-- generating and modifying column-identifiers
-- =============================================================================


cid2 :: String -> Int -> String
cid2 s i = s ++ show i

----------------------------------------------------------------------
----------------------------------------------------------------------
-- generates a column-identifier with a corresponding numerical order
cid :: Int -> String
----------------------------------------------------------------------
----------------------------------------------------------------------

cid i = cid2 "item" i




----------------------------------------------------------------------
----------------------------------------------------------------------
-- gets the numerical order of an column-identifier
ord :: String -> Int
----------------------------------------------------------------------
----------------------------------------------------------------------

ord c = i
    where
         prefix = "item"
         postfix = c \\ prefix
         i = stringToInt postfix



----------------------------------------------------------------------
----------------------------------------------------------------------
-- increases the numerical order of a column-identifier
-- incr1 "item1" 2 = "item3"
incr1 :: AttrName -> Int -> AttrName
----------------------------------------------------------------------
----------------------------------------------------------------------

incr1 n i = prefix ++ show ((stringToInt postfix) + i)
            where
            
                prefix = "item"
                postfix = n \\ prefix


----------------------------------------------------------------------
----------------------------------------------------------------------
-- increases the numerical order of the items in a list of column-identifiers
-- incr2 ["item1", "item2"] 2 = ["item3", "item4"]
incr2 :: [AttrName] -> Int -> [AttrName]
----------------------------------------------------------------------
----------------------------------------------------------------------

incr2 ns i =    map (`incr1` i) ns 


----------------------------------------------------------------------
----------------------------------------------------------------------
-- increases the numerical order of the key-items in a "subs"-association-list (column-identifiers mapped to TableInfos)
-- incr3 [("item1",_), ("item2",_)] 2 = [("item3",_), ("item4",_)]
incr3 :: [(AttrName, a)] -> Int -> [(AttrName, a)]
----------------------------------------------------------------------
----------------------------------------------------------------------

incr3 m i = map (\ (k,v) -> (incr1 k i, v)) m




----------------------------------------------------------------------
----------------------------------------------------------------------
-- decreases the numerical order of a column-identifier
-- decr1 "item3" 2 = "item1"
decr1 :: AttrName -> Int -> AttrName
----------------------------------------------------------------------
----------------------------------------------------------------------

decr1 n i = incr1 n (-1*i)


----------------------------------------------------------------------
----------------------------------------------------------------------
-- decreases the numerical order of the items in a list of column-identifiers
-- decr2 ["item3", "item4"] 2 = ["item1", "item1"]
decr2 :: [AttrName] -> Int -> [AttrName]
----------------------------------------------------------------------
----------------------------------------------------------------------

decr2 ns i =    incr2 ns (-1*i) 


----------------------------------------------------------------------
----------------------------------------------------------------------
-- decreases the numerical order of the key-items in a "subs"-association-list (column-identifiers mapped to TableInfos)
-- decr1 [("item3",_), ("item4",_)] 2 = [("item1",_), ("item2",_)]
decr3 :: [(AttrName, a)] -> Int -> [(AttrName, a)]
----------------------------------------------------------------------
----------------------------------------------------------------------

decr3 m i = incr3 m (-1*i)





-- =============================================================================
-- transforming column-identifier-lists to projection-lists
-- =============================================================================

----------------------------------------------------------------------
----------------------------------------------------------------------
asProjList1 :: [AttrName] -> [(AttrName,AttrName)]
----------------------------------------------------------------------
----------------------------------------------------------------------

asProjList1 ns = zip ns ns


----------------------------------------------------------------------
----------------------------------------------------------------------
asProjList2 :: [AttrName] -> AttrName -> [(AttrName,AttrName)]
----------------------------------------------------------------------
----------------------------------------------------------------------

asProjList2 ns oldAttrName = map (\ newAttrName -> (newAttrName,oldAttrName)) ns


----------------------------------------------------------------------
----------------------------------------------------------------------
asProjList3 :: [AttrName] -> [AttrName] -> [(AttrName,AttrName)]
----------------------------------------------------------------------
----------------------------------------------------------------------

asProjList3 = zip

 
 

----------------------------------------------------------------------
----------------------------------------------------------------------
asSortList1 :: [AttrName] -> [(AttrName, SortDirection)]
----------------------------------------------------------------------
----------------------------------------------------------------------

asSortList1 ns = map (\ attrName -> (attrName, Ascending)) ns                                       